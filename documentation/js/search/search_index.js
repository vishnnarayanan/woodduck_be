var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/guards/AdminGuard.html",[0,2.221,1,1.961]],["body/guards/AdminGuard.html",[1,2.883,2,2.493,3,0.387,4,0.334,5,0.334,6,2.884,7,2.324,8,4.467,9,0.387,10,1.105,11,3.776,12,2.874,13,0.5,14,3.477,15,0.927,16,0.035,17,0.927,18,0.387,19,0.844,20,1.969,21,0.844,22,2.493,23,0.564,24,2.884,25,0.626,26,2.493,27,2.202,28,0.844,29,1.969,30,0.387,31,0.101,32,1.33,33,1.464,34,2.202,35,2.493,36,2.493,37,3.477,38,3.477,39,1.213,40,1.969,41,2.884,42,0.026,43,0.026]],["title/controllers/AppController.html",[44,1.753,45,1.961]],["body/controllers/AppController.html",[3,0.429,4,0.371,5,0.371,9,0.429,10,1.182,13,0.555,16,0.035,21,0.937,23,0.541,25,0.694,30,0.429,31,0.112,39,1.029,42,0.027,43,0.027,44,2.757,45,3.083,46,1.786,47,3.202,48,4.645,49,1.625,50,3.86,51,1.423,52,2.723,53,3.202,54,1.625,55,3.86,56,3.86]],["title/modules/AppModule.html",[57,1.581,58,1.961]],["body/modules/AppModule.html",[3,0.234,4,0.202,5,0.202,10,0.51,13,0.302,15,0.561,16,0.036,17,0.85,18,0.428,19,0.51,21,0.51,23,0.622,25,0.378,28,0.51,30,0.234,31,0.061,32,0.615,40,2.434,41,1.744,42,0.018,43,0.018,45,2.439,46,1.475,52,2.482,53,1.744,54,0.885,57,1.628,58,3.44,59,1.074,60,1.628,61,1.744,62,1.744,63,1.744,64,2.482,65,2.753,66,2.019,67,1.332,68,1.332,69,1.508,70,2.287,71,2.287,72,1.744,73,2.645,74,3.565,75,2.103,76,1.744,77,1.744,78,2.103,79,2.103,80,1.508,81,1.074,82,2.103,83,1.744,84,2.103,85,2.103,86,1.744,87,2.103,88,0.807,89,2.103,90,1.508,91,1.744,92,1.332,93,2.103,94,2.103,95,1.508,96,2.103,97,2.103,98,2.103,99,2.103,100,2.103,101,2.103,102,3.851,103,2.103,104,2.103,105,2.103,106,2.103,107,2.103,108,2.103,109,2.103,110,2.103,111,2.103,112,2.103,113,1.074,114,1.074,115,2.103,116,1.744,117,2.103,118,2.103,119,2.103,120,2.103,121,2.103,122,2.645,123,2.103,124,2.103,125,1.806,126,2.103,127,2.103,128,1.744,129,2.103,130,3.188,131,2.103,132,2.103,133,2.103]],["title/injectables/AppService.html",[52,1.581,134,0.751]],["body/injectables/AppService.html",[3,0.452,4,0.39,5,0.39,9,0.452,10,1.22,13,0.585,16,0.035,21,0.987,23,0.452,25,0.731,30,0.452,31,0.118,39,1.083,42,0.028,43,0.028,48,4.732,51,1.469,52,2.567,134,1.22,135,1.881,136,3.372,137,4.065,138,4.065,139,4.065]],["title/guards/AuthGuard.html",[0,2.221,140,1.753]],["body/guards/AuthGuard.html",[2,2.682,3,0.416,4,0.359,5,0.359,7,2.436,8,4.592,9,0.416,10,1.158,11,3.958,12,2.976,13,0.538,15,0.997,16,0.035,17,0.997,18,0.416,19,0.908,20,2.118,21,0.908,23,0.531,24,3.102,25,0.673,26,2.682,27,2.368,30,0.416,31,0.109,32,1.093,33,1.574,34,2.368,39,0.997,42,0.027,43,0.027,140,2.702,141,3.102,142,3.739,143,3.102]],["title/injectables/AuthService.html",[134,0.751,144,1.581]],["body/injectables/AuthService.html",[3,0.249,4,0.215,5,0.215,9,0.249,10,0.811,13,0.575,15,1.066,16,0.036,17,1.066,18,0.445,19,0.97,21,0.811,23,0.573,25,0.403,28,1.076,30,0.249,31,0.065,32,1.612,39,0.89,42,0.019,43,0.019,51,1.454,54,0.942,114,2.422,134,0.811,135,1.035,144,1.705,145,1.604,146,2.541,147,2.771,148,3.34,149,1.142,150,1.604,151,1.554,152,2.237,153,1.892,154,3.34,155,2.237,156,0.859,157,2.115,158,3.34,159,2.422,160,2.237,161,2.237,162,1.417,163,2.237,164,2.237,165,2.237,166,2.237,167,2.237,168,1.267,169,1.856,170,1.604,171,1.417,172,1.604,173,1.856,174,2.264,175,2.237,176,1.856,177,2.237,178,1.856,179,3.316,180,2.532,181,2.237,182,2.237,183,2.237,184,3.998,185,2.237,186,3.34,187,2.237,188,3.34,189,3.998,190,3.34,191,2.237,192,2.237,193,2.237,194,1.417,195,1.856,196,2.237,197,1.856,198,2.237,199,2.237,200,2.237,201,2.237,202,2.237,203,2.237]],["title/classes/CreateRoleDTO.html",[31,0.09,204,1.753]],["body/classes/CreateRoleDTO.html",[3,0.459,4,0.396,5,0.396,9,0.459,13,0.593,16,0.034,18,0.459,23,0.459,30,0.459,31,0.147,42,0.028,43,0.028,49,1.736,51,1.483,204,2.873,205,2.336,206,3.421,207,2.136,208,3.48,209,4.209,210,4.125,211,4.125,212,2.958]],["title/classes/CreateUserDTO.html",[31,0.09,159,1.581]],["body/classes/CreateUserDTO.html",[3,0.363,4,0.313,5,0.313,9,0.363,13,0.787,16,0.035,18,0.609,23,0.363,30,0.363,31,0.127,42,0.024,43,0.024,49,2.304,51,1.748,113,2.51,114,2.51,156,1.887,159,2.227,205,1.847,207,1.837,209,4.91,212,2.339,213,2.705,214,3.526,215,3.526,216,4.917,217,3.261,218,3.261,219,3.261,220,3.261,221,3.261]],["title/injectables/CurrentUserInterceptor.html",[134,0.751,222,1.753]],["body/injectables/CurrentUserInterceptor.html",[3,0.352,4,0.304,5,0.304,7,1.615,9,0.352,10,1.037,12,2.742,13,0.615,15,1.139,16,0.035,17,1.139,18,0.475,19,1.037,20,1.791,21,0.768,23,0.538,25,0.769,28,1.037,30,0.352,31,0.092,32,1.415,33,1.331,34,2.003,36,2.268,39,0.843,42,0.024,43,0.024,54,1.331,134,1.037,135,1.464,143,2.623,146,2.472,149,1.615,150,2.268,151,1.697,153,1.791,156,1.214,157,2.003,162,2.003,174,2.182,194,2.003,222,2.421,223,2.623,224,3.546,225,3.163,226,3.546,227,4.842,228,4.016,229,3.163,230,2.623,231,2.623,232,2.623,233,3.163,234,3.163]],["title/injectables/CurrentUserMiddleware.html",[134,0.751,235,1.753]],["body/injectables/CurrentUserMiddleware.html",[3,0.323,4,0.279,5,0.279,7,1.481,9,0.323,10,0.978,13,0.579,15,1.074,16,0.035,17,1.074,18,0.448,19,0.978,21,0.704,23,0.584,25,0.522,28,1.123,29,1.643,30,0.323,31,0.084,32,1.177,33,2.212,35,2.08,42,0.023,43,0.023,54,1.221,134,0.978,135,1.342,146,2.363,149,1.481,150,2.08,151,1.752,153,2.281,156,1.114,174,1.481,194,1.837,235,2.281,236,2.08,237,4.029,238,2.901,239,3.342,240,3.839,241,4.148,242,3.586,243,4.148,244,2.901,245,2.901,246,3.342,247,2.406,248,2.889,249,2.406,250,2.406,251,2.406,252,2.406,253,1.643,254,1.481,255,2.406,256,2.406]],["title/interfaces/Request.html",[33,1.303,253,1.753]],["body/interfaces/Request.html",[3,0.357,4,0.308,5,0.308,7,1.639,9,0.357,16,0.035,18,0.357,19,1.048,23,0.605,25,0.578,28,1.321,29,1.818,30,0.357,31,0.093,32,1.262,33,2.197,35,2.303,42,0.024,43,0.024,54,1.352,134,1.048,146,1.639,151,1.513,153,1.818,156,1.233,174,1.639,194,2.034,207,1.818,235,1.818,236,2.303,239,2.664,240,2.664,241,3.582,242,3.097,243,3.582,246,3.582,247,2.664,248,3.097,249,2.664,250,2.664,251,2.664,252,2.664,253,1.818,254,2.664,255,2.664,256,2.664,257,3.211]],["title/entities/Role.html",[88,1.188,258,1.753]],["body/entities/Role.html",[3,0.32,4,0.277,5,0.277,9,0.32,13,0.78,16,0.035,18,0.603,23,0.513,28,1.351,29,1.632,30,0.32,31,0.116,42,0.022,43,0.022,49,2.284,51,1.172,88,1.539,125,1.632,207,1.688,208,2.92,258,2.27,259,2.39,260,3.825,261,3.825,262,4.611,263,3.825,264,3.825,265,4.501,266,3.326,267,2.881,268,3.326,269,2.881,270,2.539,271,3.326,272,2.881,273,3.326,274,2.881,275,4.009,276,3.326,277,2.881,278,3.326,279,2.881,280,2.066,281,1.632,282,2.881,283,2.881,284,1.632]],["title/controllers/RolesController.html",[44,1.753,285,1.961]],["body/controllers/RolesController.html",[3,0.334,4,0.289,5,0.289,9,0.334,10,1.002,13,0.594,15,1.1,16,0.035,17,1.1,18,0.459,19,1.002,21,1.002,23,0.611,25,0.541,28,0.729,29,1.701,30,0.334,31,0.087,32,0.878,39,1.1,42,0.023,43,0.023,46,1.39,49,1.738,51,1.378,54,1.265,88,1.584,140,1.701,204,3.113,254,1.534,285,2.614,286,2.492,287,2.492,288,3.005,289,3.424,290,3.424,291,2.492,292,4.127,293,3.005,294,3.005,295,4.127,296,3.005,297,4.127,298,3.005,299,3.005,300,2.492,301,3.005,302,2.492,303,1.738,304,2.492,305,3.005,306,2.492,307,3.005,308,3.005,309,3.005,310,3.005,311,3.005]],["title/modules/RolesModule.html",[57,1.581,64,1.581]],["body/modules/RolesModule.html",[3,0.38,4,0.328,5,0.328,16,0.035,23,0.618,25,0.615,30,0.38,31,0.099,42,0.025,43,0.025,46,2.084,57,2.299,59,1.746,60,2.299,64,2.971,66,2.852,67,2.166,68,2.166,70,3.23,71,2.453,80,2.453,81,1.746,88,1.313,285,3.188,303,2.576,304,2.837,312,2.837,313,2.837,314,2.837,315,3.42,316,3.735,317,2.837,318,3.42,319,3.42]],["title/injectables/RolesService.html",[134,0.751,303,1.303]],["body/injectables/RolesService.html",[3,0.341,4,0.295,5,0.295,9,0.341,10,1.017,13,0.686,15,1.271,16,0.035,17,1.271,18,0.53,19,1.157,21,1.017,23,0.596,25,0.552,30,0.341,31,0.089,32,0.897,39,1.117,42,0.024,43,0.024,51,1.393,81,1.568,88,1.608,134,1.017,135,1.421,149,1.568,204,3.036,208,1.944,284,1.739,289,3.475,290,3.475,291,3.475,302,2.547,303,1.764,317,2.547,320,2.547,321,2.547,322,3.968,323,3.07,324,3.07,325,4.189,326,3.07,327,2.547,328,3.07,329,2.547,330,3.07,331,3.07,332,3.07]],["title/classes/SerializeInterceptor.html",[31,0.09,333,2.221]],["body/classes/SerializeInterceptor.html",[3,0.35,4,0.303,5,0.303,7,2.177,9,0.35,10,1.035,12,2.736,13,0.613,15,1.136,16,0.035,17,1.136,18,0.474,19,1.035,20,1.784,21,0.765,23,0.576,25,0.567,26,3.466,27,1.995,30,0.474,31,0.124,39,1.288,42,0.024,43,0.024,54,1.326,149,1.609,205,1.784,224,3.537,226,3.537,228,4.008,230,2.614,231,2.614,232,3.537,242,3.466,281,1.784,333,3.058,334,2.26,335,3.151,336,3.151,337,2.614,338,3.151,339,3.151,340,3.151,341,3.151,342,2.614,343,3.151,344,3.151,345,3.151,346,3.151,347,3.151,348,3.151,349,3.151]],["title/entities/User.html",[28,0.751,258,1.753]],["body/entities/User.html",[3,0.251,4,0.217,5,0.217,9,0.251,13,0.807,16,0.035,18,0.624,22,2.41,23,0.447,28,0.816,30,0.251,31,0.098,40,1.277,42,0.019,43,0.019,49,2.362,51,1.615,88,2.122,113,2.051,114,2.051,125,1.277,156,1.542,207,1.415,214,2.881,215,2.881,258,1.277,260,3.332,261,3.332,263,3.332,265,4.14,266,3.332,268,3.332,270,2.128,271,2.787,273,3.332,278,4.408,280,2.41,281,1.277,284,1.277,350,1.871,351,4.017,352,2.881,353,2.255,354,2.255,355,2.255,356,2.255,357,2.255,358,2.255,359,4.451,360,3.36,361,2.255,362,3.36,363,3.36,364,2.255,365,2.255,366,2.255,367,2.255,368,3.36,369,2.255,370,1.871,371,2.255,372,2.255,373,2.255,374,2.255,375,2.255,376,2.255]],["title/classes/UserDTO.html",[31,0.09,168,1.753]],["body/classes/UserDTO.html",[3,0.321,4,0.278,5,0.278,9,0.321,13,0.801,16,0.035,18,0.62,22,2.882,23,0.321,30,0.321,31,0.117,39,0.771,42,0.023,43,0.023,49,2.346,51,1.708,113,2.359,114,2.359,156,1.773,168,2.276,205,1.637,207,1.692,208,1.831,214,3.313,215,3.313,280,2.882,281,1.637,377,2.398,378,4.62,379,4.62,380,5.904,381,2.891,382,2.891,383,2.891,384,2.891,385,2.891,386,2.891,387,2.891,388,2.891,389,2.891,390,2.891,391,2.891,392,2.891]],["title/controllers/UsersController.html",[44,1.753,393,1.961]],["body/controllers/UsersController.html",[1,1.02,3,0.179,4,0.155,5,0.155,9,0.179,10,0.628,13,0.684,15,1.219,16,0.036,17,1.219,18,0.508,19,1.11,21,1.154,23,0.583,25,0.29,28,1.292,30,0.179,31,0.047,32,0.949,39,1.308,42,0.015,43,0.015,46,0.746,49,2.001,51,1.578,92,2.755,113,1.322,114,1.657,140,0.912,144,1.657,146,2.505,147,2.148,151,0.565,153,0.912,156,1.427,157,2.056,159,2.079,162,1.02,168,0.912,169,1.337,170,1.156,171,1.02,174,1.322,176,1.337,197,3.084,222,0.912,254,0.823,264,1.337,270,1.64,287,1.337,300,1.337,352,1.857,393,1.64,394,1.337,395,2.148,396,3.084,397,2.148,398,2.148,399,2.589,400,2.589,401,2.589,402,1.337,403,2.589,404,1.611,405,1.611,406,1.611,407,1.611,408,1.611,409,1.611,410,1.337,411,2.589,412,1.611,413,1.611,414,1.611,415,1.611,416,1.611,417,2.589,418,1.611,419,1.611,420,2.589,421,1.611,422,1.611,423,1.611,424,1.611,425,1.611,426,1.611,427,1.611,428,1.156,429,1.611,430,1.337,431,1.337,432,1.611,433,1.611,434,2.589,435,1.611,436,1.611,437,1.611,438,1.611,439,1.611,440,1.611,441,3.246,442,1.611,443,1.611,444,1.611,445,1.611,446,2.589,447,1.611,448,1.611,449,1.611,450,1.611,451,1.611,452,1.611,453,1.611,454,3.246,455,1.611,456,1.611,457,1.611,458,1.611,459,1.611,460,1.611,461,1.611,462,1.611,463,1.611,464,1.611,465,1.611,466,1.611,467,1.611,468,1.611,469,1.611,470,1.611,471,1.611,472,1.611]],["title/modules/UsersModule.html",[57,1.581,65,1.753]],["body/modules/UsersModule.html",[3,0.299,4,0.258,5,0.258,10,0.652,13,0.386,15,0.716,16,0.036,17,0.716,18,0.299,19,0.652,21,0.652,23,0.647,25,0.484,28,0.652,30,0.299,31,0.078,42,0.021,43,0.021,46,1.767,57,1.949,59,1.372,60,1.949,64,2.607,65,3.259,66,2.418,67,1.702,68,1.702,70,2.738,71,2.738,72,2.229,73,3.167,74,4.011,76,2.229,77,2.229,80,2.738,81,1.372,144,2.607,151,1.79,162,1.702,171,1.702,222,2.162,235,1.522,303,1.131,316,2.229,393,2.812,430,2.229,431,2.229,473,2.229,474,2.688,475,2.229,476,2.688,477,2.688,478,2.688,479,3.818,480,2.229,481,2.229,482,2.688,483,2.688,484,2.688,485,2.688,486,2.688,487,2.688,488,2.688]],["title/injectables/UsersService.html",[134,0.751,151,1.085]],["body/injectables/UsersService.html",[3,0.217,4,0.187,5,0.187,9,0.217,10,0.73,13,0.678,15,1.189,16,0.036,17,1.189,18,0.496,19,1.083,21,1.083,23,0.547,25,0.35,28,1.083,30,0.217,31,0.057,32,1.304,39,1.31,40,1.103,42,0.017,43,0.017,51,1.378,81,0.994,88,1.409,113,0.994,134,0.473,135,0.901,146,2.807,149,0.994,151,1.053,156,1.409,157,2.615,159,2.278,170,1.396,171,1.233,174,2.278,178,1.615,179,2.493,180,2.325,195,2.493,270,2.325,276,1.615,284,1.103,303,1.738,306,3.046,321,1.615,322,3.2,327,1.615,329,1.615,352,1.396,370,1.615,395,2.493,396,3.425,397,2.493,398,2.493,402,2.493,410,2.493,481,1.615,489,1.615,490,3.006,491,1.947,492,1.947,493,1.947,494,3.006,495,1.947,496,1.947,497,3.006,498,3.672,499,3.672,500,1.947,501,1.947,502,1.947,503,1.947,504,1.947,505,1.947,506,1.947,507,1.947,508,1.947,509,1.947,510,1.947,511,3.006,512,3.006,513,3.006,514,1.947,515,1.947,516,1.947,517,1.947,518,3.006,519,3.006,520,1.947,521,1.947,522,1.947]],["title/coverage.html",[523,3.022]],["body/coverage.html",[0,2.597,1,1.581,5,0.24,6,2.071,16,0.035,18,0.278,28,0.606,31,0.136,33,1.051,42,0.02,43,0.02,44,2.413,45,1.581,47,2.071,52,1.274,69,1.79,88,0.958,90,2.597,95,1.79,134,1.256,136,2.071,140,1.414,141,2.071,144,1.274,145,2.597,151,0.875,159,1.274,168,1.414,172,1.79,180,1.581,204,1.414,206,2.071,213,2.071,222,1.414,223,2.071,235,1.414,236,2.597,253,1.414,254,1.274,258,2.051,259,2.071,285,1.581,286,2.071,303,1.051,320,2.071,333,1.79,334,2.597,342,3.004,350,2.071,377,2.071,393,1.581,394,2.071,428,1.79,489,2.071,523,1.79,524,2.496,525,2.496,526,2.496,527,6.2,528,5.176,529,5.176,530,5.662,531,2.071,532,4.674,533,2.597,534,2.071,535,3.621,536,3.004,537,2.071,538,2.496,539,2.496,540,2.496,541,2.496,542,2.496,543,2.496]],["title/dependencies.html",[60,1.899,544,2.15]],["body/dependencies.html",[16,0.035,25,0.65,27,2.287,31,0.136,42,0.026,43,0.026,60,1.844,81,1.844,86,2.995,92,2.955,212,2.59,248,2.59,281,2.045,284,2.045,480,2.995,545,5.169,546,3.611,547,3.611,548,3.611,549,3.611,550,3.611,551,3.611,552,3.611,553,3.611,554,3.611,555,3.611,556,3.611,557,3.611,558,3.611,559,3.611,560,3.611,561,3.611,562,3.611,563,3.611,564,3.611,565,3.611,566,3.611,567,3.611,568,3.611,569,3.611,570,3.611,571,3.611,572,3.611]],["title/miscellaneous/functions.html",[573,1.641,574,3.086]],["body/miscellaneous/functions.html",[9,0.49,15,1.174,16,0.032,17,1.174,18,0.49,19,1.069,42,0.03,43,0.03,334,3.16,337,3.654,428,3.787,533,3.16,534,4.691,573,2.79,574,3.654,575,3.654,576,4.406,577,4.406]],["title/index.html",[9,0.288,578,2.592,579,2.592]],["body/index.html",[4,0.306,16,0.035,42,0.024,43,0.024,83,2.643,322,2.285,523,2.285,580,3.187,581,3.187,582,4.296,583,3.187,584,3.187,585,3.187,586,3.187,587,3.187,588,3.187,589,2.643,590,4.86,591,3.187,592,3.187,593,3.187,594,5.718,595,3.187,596,3.187,597,3.187,598,5.595,599,3.187,600,3.187,601,4.296,602,3.187,603,3.187,604,3.187,605,3.187,606,4.296,607,4.296,608,3.187,609,3.187,610,3.187,611,4.296,612,4.296,613,3.187,614,3.187,615,3.187,616,3.187,617,3.187,618,2.643,619,3.187,620,3.187,621,3.187,622,3.187,623,3.187,624,3.187,625,3.187,626,3.187,627,3.187,628,2.643,629,3.187,630,3.187,631,3.187,632,3.187,633,3.187,634,3.187,635,2.643]],["title/modules.html",[59,2.151]],["body/modules.html",[16,0.03,42,0.03,43,0.03,58,2.835,59,2.285,64,2.285,65,2.535,618,4.723,636,5.694,637,5.694,638,5.694]],["title/overview.html",[639,3.495]],["body/overview.html",[2,2.423,16,0.034,42,0.025,43,0.025,46,1.564,52,2.555,58,3.73,59,1.725,60,2.281,61,2.803,62,2.803,63,2.803,64,2.962,65,3.376,66,2.829,67,2.14,68,2.14,125,1.913,135,1.564,144,2.555,151,1.754,205,1.913,253,1.913,303,2.443,312,2.803,313,2.803,314,2.803,473,2.803,475,2.803,639,2.803,640,4.467,641,4.467,642,3.379,643,3.379,644,3.379]],["title/properties.html",[207,1.566,544,2.15]],["body/properties.html",[16,0.034,42,0.03,43,0.03,207,1.936,589,3.814,628,3.814,635,3.814,645,4.598,646,4.598,647,4.598]],["title/miscellaneous/variables.html",[573,1.641,648,3.086]],["body/miscellaneous/variables.html",[9,0.358,12,1.825,16,0.035,18,0.481,20,1.825,32,0.942,33,1.357,34,2.041,36,2.312,39,0.859,40,2.452,42,0.024,43,0.024,69,2.312,90,3.748,91,3.591,92,2.742,95,3.506,116,2.674,122,2.674,125,1.825,128,2.674,145,2.312,172,3.105,173,2.674,180,2.041,254,2.21,531,2.674,533,2.312,536,2.674,537,3.591,573,2.041,575,2.674,648,2.674,649,3.223,650,3.223,651,4.329,652,3.223,653,5.613,654,5.613,655,3.223,656,3.223,657,3.223,658,3.223,659,3.223,660,3.223,661,3.223,662,3.223,663,4.329,664,3.223,665,3.223,666,3.223]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":646,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["0.1.6",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["0.3.11",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":530,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":644,"title":{},"body":{"overview.html":{}}}],["2",{"_index":641,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["2.0.44",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["2.16.21",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["225",{"_index":368,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":640,"title":{},"body":{"overview.html":{}}}],["300",{"_index":360,"title":{},"body":{"entities/User.html":{}}}],["4",{"_index":643,"title":{},"body":{"overview.html":{}}}],["443",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["4a09",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["5.1.6",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["5d7f1a59",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":642,"title":{},"body":{"overview.html":{}}}],["7.0.3",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["72cf",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["9.0.0",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["_scrypt",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["activeuser",{"_index":378,"title":{},"body":{"classes/UserDTO.html":{}}}],["address",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["admin",{"_index":38,"title":{},"body":{"guards/AdminGuard.html":{}}}],["adminguard",{"_index":1,"title":{"guards/AdminGuard.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["already",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":619,"title":{},"body":{"index.html":{}}}],["app",{"_index":596,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["app_interceptor",{"_index":479,"title":{},"body":{"modules/UsersModule.html":{}}}],["appcontroller",{"_index":45,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":588,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":58,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":52,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["attrs",{"_index":498,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth.service",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["authguard",{"_index":140,"title":{"guards/AuthGuard.html":{}},"body":{"guards/AuthGuard.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["author",{"_index":628,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":144,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":620,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('email",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('incorrect",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["badrequestexception('invalid",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{}}}],["be2d",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["boolean",{"_index":22,"title":{},"body":{"guards/AdminGuard.html":{},"entities/User.html":{},"classes/UserDTO.html":{}}}],["bootstrap",{"_index":534,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":638,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":636,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["building",{"_index":583,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":228,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{},"classes/SerializeInterceptor.html":{}}}],["canactivate",{"_index":8,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["canactivate(context",{"_index":11,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["canactivate,executioncontext",{"_index":24,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}}}],["class",{"_index":31,"title":{"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"classes/SerializeInterceptor.html":{},"classes/UserDTO.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":205,"title":{},"body":{"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"classes/SerializeInterceptor.html":{},"classes/UserDTO.html":{},"overview.html":{}}}],["client",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["cluster_appmodule",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_rolesmodule",{"_index":312,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_exports",{"_index":313,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_rolesmodule_providers",{"_index":314,"title":{},"body":{"modules/RolesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":473,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":474,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":475,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":278,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["column({length",{"_index":359,"title":{},"body":{"entities/User.html":{}}}],["configmodule,configservice",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["configure",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["console",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(list",{"_index":514,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(role",{"_index":309,"title":{},"body":{"controllers/RolesController.html":{}}}],["console.log(user",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["const",{"_index":32,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectrepository(role",{"_index":328,"title":{},"body":{"injectables/RolesService.html":{}}}],["constructor(@injectrepository(user",{"_index":502,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(dto",{"_index":335,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["constructor(private",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/RolesController.html":{},"classes/SerializeInterceptor.html":{}}}],["constructor(public",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["constructor(repository",{"_index":321,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{}}}],["consumer",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(cookiesession({keys",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(currentusermiddleware).forroutes",{"_index":488,"title":{},"body":{"modules/UsersModule.html":{}}}],["context",{"_index":20,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/CurrentUserInterceptor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["context.switchtohttp().getrequest",{"_index":34,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/CurrentUserInterceptor.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":44,"title":{"controllers/AppController.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["controller('roles",{"_index":305,"title":{},"body":{"controllers/RolesController.html":{}}}],["controller('users",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller,post,get,put,body",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller,post,get,put,query,body",{"_index":298,"title":{},"body":{"controllers/RolesController.html":{}}}],["controllers",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["cookiesession",{"_index":90,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":523,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdatecolumn",{"_index":266,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["createdon",{"_index":260,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["createparamdecorator((data",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createrole",{"_index":289,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["createrole(@body",{"_index":307,"title":{},"body":{"controllers/RolesController.html":{}}}],["createrole(createroledto",{"_index":291,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["createroledto",{"_index":204,"title":{"classes/CreateRoleDTO.html":{}},"body":{"classes/CreateRoleDTO.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"coverage.html":{}}}],["createuser",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":159,"title":{"classes/CreateUserDTO.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto,@session",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto.password",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["cross",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["crypto",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentuser",{"_index":254,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/RolesController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["currentuserinterceptor",{"_index":222,"title":{"injectables/CurrentUserInterceptor.html":{}},"body":{"injectables/CurrentUserInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["currentusermiddleware",{"_index":235,"title":{"injectables/CurrentUserMiddleware.html":{}},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["database",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["datasource",{"_index":537,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["datasource(datasourceoptions",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["datasourceoptions",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":265,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["db.sqlite",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["dbadmin",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["declare",{"_index":250,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["decorators",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":13,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletedatecolumn",{"_index":268,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["deletedon",{"_index":261,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["dependencies",{"_index":60,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":589,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":597,"title":{},"body":{"index.html":{}}}],["dist/**/*.entity.{js,ts",{"_index":662,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dist/users/*.entity.js",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":337,"title":{},"body":{"classes/SerializeInterceptor.html":{},"miscellaneous/functions.html":{}}}],["dto/createroledto.dto",{"_index":302,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["dto/createuserdto.dto",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/userdto.dto",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["dto:any",{"_index":346,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["e2e",{"_index":608,"title":{},"body":{"index.html":{}}}],["eager",{"_index":364,"title":{},"body":{"entities/User.html":{}}}],["eager:true",{"_index":376,"title":{},"body":{"entities/User.html":{}}}],["efficient",{"_index":584,"title":{},"body":{"index.html":{}}}],["email",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["emailaddress",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["encrypt",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["entities",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"entities/Role.html":{},"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":258,"title":{"entities/Role.html":{},"entities/User.html":{}},"body":{"entities/Role.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity,column,primarygeneratedcolumn",{"_index":371,"title":{},"body":{"entities/User.html":{}}}],["env",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["env.development",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["exclude",{"_index":280,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{},"classes/UserDTO.html":{}}}],["excludeextraneousvalues:true",{"_index":349,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["executioncontext",{"_index":12,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/CurrentUserInterceptor.html":{},"classes/SerializeInterceptor.html":{},"miscellaneous/variables.html":{}}}],["executioncontext,callhandler",{"_index":231,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{},"classes/SerializeInterceptor.html":{}}}],["exists",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":30,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":316,"title":{},"body":{"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["expose",{"_index":380,"title":{},"body":{"classes/UserDTO.html":{}}}],["expose()@transform",{"_index":386,"title":{},"body":{"classes/UserDTO.html":{}}}],["expose,exclude",{"_index":389,"title":{},"body":{"classes/UserDTO.html":{}}}],["express",{"_index":248,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"dependencies.html":{}}}],["extra",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["f6511f48638f.hana.trial",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["false",{"_index":41,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{}}}],["file",{"_index":5,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["firstname",{"_index":214,"title":{},"body":{"classes/CreateUserDTO.html":{},"entities/User.html":{},"classes/UserDTO.html":{}}}],["found",{"_index":519,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":582,"title":{},"body":{"index.html":{}}}],["function",{"_index":342,"title":{},"body":{"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["functions",{"_index":574,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/getuserbyemail",{"_index":465,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/listofusers",{"_index":462,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/whoami",{"_index":446,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('getrolebyname",{"_index":295,"title":{},"body":{"controllers/RolesController.html":{}}}],["gethello",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getlistofusers",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getrolebyname",{"_index":290,"title":{},"body":{"controllers/RolesController.html":{},"injectables/RolesService.html":{}}}],["getrolebyname(@query('usertype",{"_index":310,"title":{},"body":{"controllers/RolesController.html":{}}}],["getrolebyname(roletype",{"_index":294,"title":{},"body":{"controllers/RolesController.html":{}}}],["getrolebyname(usertype",{"_index":325,"title":{},"body":{"injectables/RolesService.html":{}}}],["getting",{"_index":578,"title":{"index.html":{}},"body":{}}],["getuserbyemail",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuserbyemail(@query('email",{"_index":466,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyemail(email",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyemail(emailaddress",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["global",{"_index":251,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["grow",{"_index":615,"title":{},"body":{"index.html":{}}}],["guard",{"_index":0,"title":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{}},"body":{"coverage.html":{}}}],["guards",{"_index":2,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"overview.html":{}}}],["guards/authguard.guard",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["handler",{"_index":227,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{}}}],["handler.handle",{"_index":234,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{}}}],["hash",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash.tostring('hex",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["hdb",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["hello",{"_index":138,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":625,"title":{},"body":{"index.html":{}}}],["host",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":632,"title":{},"body":{"index.html":{}}}],["httpstatus,useguards",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["httpstatus.ok",{"_index":453,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["if(!emailaddress",{"_index":515,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(!user",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["if(storedhash===hash.tostring('hex",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(user",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["if(user.role.usertype",{"_index":37,"title":{},"body":{"guards/AdminGuard.html":{}}}],["implements",{"_index":7,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["import",{"_index":23,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":134,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectable,notfoundexception",{"_index":501,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectables",{"_index":135,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"injectables/RolesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":327,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["installation",{"_index":593,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":595,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":224,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{},"classes/SerializeInterceptor.html":{}}}],["intercept(context",{"_index":226,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{},"classes/SerializeInterceptor.html":{}}}],["interceptors/currentuserinterceptor.interceptor",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["interceptors/serialize.interceptor",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["interface",{"_index":253,"title":{"interfaces/Request.html":{}},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":257,"title":{},"body":{"interfaces/Request.html":{}}}],["isactiveuser",{"_index":351,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":216,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isglobal",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["isstring",{"_index":209,"title":{},"body":{"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{}}}],["isstring,isnumber,min,max,islatitude,islongitude",{"_index":211,"title":{},"body":{"classes/CreateRoleDTO.html":{}}}],["join",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["joincolumn",{"_index":373,"title":{},"body":{"entities/User.html":{}}}],["kamil",{"_index":629,"title":{},"body":{"index.html":{}}}],["key')],}),).forroutes",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["lastname",{"_index":215,"title":{},"body":{"classes/CreateUserDTO.html":{},"entities/User.html":{},"classes/UserDTO.html":{}}}],["license",{"_index":635,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":612,"title":{},"body":{"index.html":{}}}],["list",{"_index":512,"title":{},"body":{"injectables/UsersService.html":{}}}],["logging",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["manytoone",{"_index":375,"title":{},"body":{"entities/User.html":{}}}],["manytoone(type",{"_index":362,"title":{},"body":{"entities/User.html":{}}}],["map",{"_index":339,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["matching",{"_index":43,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["middlewareconsumer",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["middlewares/currentusermiddleware.middleware",{"_index":483,"title":{},"body":{"modules/UsersModule.html":{}}}],["migrations",{"_index":663,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrations/*.js",{"_index":664,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationsrun:true",{"_index":666,"title":{},"body":{"miscellaneous/variables.html":{}}}],["migrationstablename",{"_index":665,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":573,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":611,"title":{},"body":{"index.html":{}}}],["mode",{"_index":601,"title":{},"body":{"index.html":{}}}],["module",{"_index":57,"title":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":59,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":624,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mysql2",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":630,"title":{},"body":{"index.html":{}}}],["name",{"_index":17,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":252,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["nest",{"_index":590,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":634,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":232,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{},"classes/SerializeInterceptor.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/common/interfaces/middleware",{"_index":247,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["nestjs/config",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":480,"title":{},"body":{"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":246,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["never",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["new",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":242,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"classes/SerializeInterceptor.html":{}}}],["next.handle().pipe(map((data:any",{"_index":347,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["nextfunction",{"_index":243,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["node.js",{"_index":581,"title":{},"body":{"index.html":{}}}],["notfoundexception(\"user",{"_index":518,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":594,"title":{},"body":{"index.html":{}}}],["null",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["number",{"_index":270,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number,@query('emailaddress",{"_index":469,"title":{},"body":{"controllers/UsersController.html":{}}}],["obj.role.usertype",{"_index":392,"title":{},"body":{"classes/UserDTO.html":{}}}],["object.assign(user,attrs",{"_index":520,"title":{},"body":{"injectables/UsersService.html":{}}}],["observable",{"_index":26,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"classes/SerializeInterceptor.html":{}}}],["onetomany",{"_index":372,"title":{},"body":{"entities/User.html":{}}}],["onetomany(type",{"_index":275,"title":{},"body":{"entities/Role.html":{}}}],["onetomany,createdatecolumn,updatedatecolumn,deletedatecolumn",{"_index":283,"title":{},"body":{"entities/Role.html":{}}}],["onetoone",{"_index":374,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":613,"title":{},"body":{"index.html":{}}}],["optional",{"_index":19,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["ormconfig",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["out",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":639,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":544,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":15,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["partial",{"_index":499,"title":{},"body":{"injectables/UsersService.html":{}}}],["password",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{}}}],["password:'root",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["permissionset",{"_index":379,"title":{},"body":{"classes/UserDTO.html":{}}}],["plaintoclass",{"_index":341,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["plaintoclass(this.dto,data",{"_index":348,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["please",{"_index":622,"title":{},"body":{"index.html":{}}}],["pool",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["post('/createrole",{"_index":292,"title":{},"body":{"controllers/RolesController.html":{}}}],["post('/signin",{"_index":455,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signup",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('signout",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":287,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":271,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn,column",{"_index":282,"title":{},"body":{"entities/Role.html":{}}}],["private",{"_index":329,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{}}}],["process.env.name",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["production",{"_index":603,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":580,"title":{},"body":{"index.html":{}}}],["project",{"_index":614,"title":{},"body":{"index.html":{}}}],["promisify",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["promisify(_scrypt",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["properties",{"_index":207,"title":{"properties.html":{}},"body":{"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"properties.html":{}}}],["provide",{"_index":486,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["put('/updateuser",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('password",{"_index":457,"title":{},"body":{"controllers/UsersController.html":{}}}],["query,delete,useinterceptors,classserializerinterceptor,session",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["randombytes(8).tostring('hex",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["randombytes,scrypt",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["read",{"_index":623,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":55,"title":{},"body":{"controllers/AppController.html":{}}}],["reflect",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["removeuser",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removeuser(@query('username",{"_index":471,"title":{},"body":{"controllers/UsersController.html":{}}}],["removeuser(username",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":322,"title":{},"body":{"injectables/RolesService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["repository,private",{"_index":503,"title":{},"body":{"injectables/UsersService.html":{}}}],["req",{"_index":245,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["req.currentuser",{"_index":256,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["req.session",{"_index":255,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["request",{"_index":33,"title":{"interfaces/Request.html":{}},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["request.currentuser",{"_index":36,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/CurrentUserInterceptor.html":{},"miscellaneous/variables.html":{}}}],["request.session.emailaddress",{"_index":143,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/CurrentUserInterceptor.html":{}}}],["require('../ormconfig",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["require('cookie",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["res",{"_index":240,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["reset",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":241,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["result",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":42,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":39,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":21,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["role",{"_index":88,"title":{"entities/Role.html":{}},"body":{"modules/AppModule.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["role.entity",{"_index":317,"title":{},"body":{"modules/RolesModule.html":{},"injectables/RolesService.html":{}}}],["role.users",{"_index":363,"title":{},"body":{"entities/User.html":{}}}],["roleid",{"_index":262,"title":{},"body":{"entities/Role.html":{}}}],["roles",{"_index":288,"title":{},"body":{"controllers/RolesController.html":{}}}],["roles.controller",{"_index":318,"title":{},"body":{"modules/RolesModule.html":{}}}],["roles.service",{"_index":304,"title":{},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{}}}],["roles/role.entity",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["roles/roles.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["rolescontroller",{"_index":285,"title":{"controllers/RolesController.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"coverage.html":{}}}],["roleservice",{"_index":306,"title":{},"body":{"controllers/RolesController.html":{},"injectables/UsersService.html":{}}}],["rolesmodule",{"_index":64,"title":{"modules/RolesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["rolesservice",{"_index":303,"title":{"injectables/RolesService.html":{}},"body":{"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["roletype",{"_index":297,"title":{},"body":{"controllers/RolesController.html":{}}}],["root12345",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":598,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":27,"title":{},"body":{"guards/AdminGuard.html":{},"guards/AuthGuard.html":{},"classes/SerializeInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":340,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["salt",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["salt,storedhash",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["sap",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["sap/hana",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["saveduser",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["saveduser=this.userservice.createuser(createuserdto",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":585,"title":{},"body":{"index.html":{}}}],["schema",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["scrypt",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["scrypt(createuserdto.password,salt,32",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["scrypt(password,salt,32",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["serialize",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["serialize(dto",{"_index":577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["serialize(dto:any",{"_index":343,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["serialize(userdto",{"_index":454,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize(userdto)@get('/getuserbyemail",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize(userdto)@get('/listofusers')@useguards(adminguard",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["serialize(userdto)@post('/signin",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["serializeinterceptor",{"_index":333,"title":{"classes/SerializeInterceptor.html":{}},"body":{"classes/SerializeInterceptor.html":{},"coverage.html":{}}}],["serializeinterceptor(dto",{"_index":345,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["server",{"_index":586,"title":{},"body":{"index.html":{}}}],["session",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["session.emailaddress",{"_index":460,"title":{},"body":{"controllers/UsersController.html":{}}}],["session.emailaddress=null",{"_index":452,"title":{},"body":{"controllers/UsersController.html":{}}}],["session.userid",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["session:any",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{}}}],["side",{"_index":587,"title":{},"body":{"index.html":{}}}],["signin",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["signin(@query('email",{"_index":456,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(email",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["signin(emailaddress",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["signout",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["signout(@session",{"_index":451,"title":{},"body":{"controllers/UsersController.html":{}}}],["signout(session",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["signup",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup(createuserdto",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"guards/AdminGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"modules/RolesModule.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":617,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["sqlite3",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["src/.../app.module.ts",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../auth.service.ts",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../currentuser.decorators.ts",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":575,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../serialize.interceptor.ts",{"_index":576,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../typeorm.config.ts",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":50,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts:51",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":136,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["src/decorators/currentuser.decorators",{"_index":300,"title":{},"body":{"controllers/RolesController.html":{},"controllers/UsersController.html":{}}}],["src/decorators/currentuser.decorators.ts",{"_index":531,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/guards/adminguard.guard",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/guards/adminguard.guard.ts",{"_index":6,"title":{},"body":{"guards/AdminGuard.html":{},"coverage.html":{}}}],["src/guards/adminguard.guard.ts:7",{"_index":14,"title":{},"body":{"guards/AdminGuard.html":{}}}],["src/guards/authguard.guard",{"_index":301,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/guards/authguard.guard.ts",{"_index":141,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/guards/authguard.guard.ts:6",{"_index":142,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/interceptors/serialize.interceptor.ts",{"_index":334,"title":{},"body":{"classes/SerializeInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/interceptors/serialize.interceptor.ts:11",{"_index":336,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["src/interceptors/serialize.interceptor.ts:13",{"_index":338,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["src/main.ts",{"_index":533,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/roles/dto/createroledto.dto.ts",{"_index":206,"title":{},"body":{"classes/CreateRoleDTO.html":{},"coverage.html":{}}}],["src/roles/dto/createroledto.dto.ts:5",{"_index":210,"title":{},"body":{"classes/CreateRoleDTO.html":{}}}],["src/roles/role.entity",{"_index":370,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["src/roles/role.entity.ts",{"_index":259,"title":{},"body":{"entities/Role.html":{},"coverage.html":{}}}],["src/roles/role.entity.ts:12",{"_index":279,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/role.entity.ts:15",{"_index":277,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/role.entity.ts:18",{"_index":267,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/role.entity.ts:21",{"_index":274,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/role.entity.ts:24",{"_index":269,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/role.entity.ts:9",{"_index":272,"title":{},"body":{"entities/Role.html":{}}}],["src/roles/roles.controller.ts",{"_index":286,"title":{},"body":{"controllers/RolesController.html":{},"coverage.html":{}}}],["src/roles/roles.controller.ts:14",{"_index":293,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.controller.ts:22",{"_index":296,"title":{},"body":{"controllers/RolesController.html":{}}}],["src/roles/roles.module",{"_index":482,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/roles/roles.module.ts",{"_index":315,"title":{},"body":{"modules/RolesModule.html":{}}}],["src/roles/roles.service",{"_index":481,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/roles/roles.service.ts",{"_index":320,"title":{},"body":{"injectables/RolesService.html":{},"coverage.html":{}}}],["src/roles/roles.service.ts:12",{"_index":324,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:19",{"_index":326,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/roles/roles.service.ts:9",{"_index":323,"title":{},"body":{"injectables/RolesService.html":{}}}],["src/typeorm.config.ts",{"_index":536,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/auth.service.ts",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/auth.service.ts:12",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:16",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/auth.service.ts:34",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/users/dto/createuserdto.dto.ts",{"_index":213,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/users/dto/createuserdto.dto.ts:11",{"_index":218,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/dto/createuserdto.dto.ts:14",{"_index":219,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/dto/createuserdto.dto.ts:17",{"_index":217,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/dto/createuserdto.dto.ts:5",{"_index":221,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/dto/createuserdto.dto.ts:8",{"_index":220,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/users/dto/userdto.dto.ts",{"_index":377,"title":{},"body":{"classes/UserDTO.html":{},"coverage.html":{}}}],["src/users/dto/userdto.dto.ts:12",{"_index":383,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/dto/userdto.dto.ts:15",{"_index":384,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/dto/userdto.dto.ts:18",{"_index":382,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/dto/userdto.dto.ts:21",{"_index":381,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/dto/userdto.dto.ts:29",{"_index":387,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/dto/userdto.dto.ts:6",{"_index":388,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/dto/userdto.dto.ts:9",{"_index":385,"title":{},"body":{"classes/UserDTO.html":{}}}],["src/users/interceptors/currentuserinterceptor.interceptor.ts",{"_index":223,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{},"coverage.html":{}}}],["src/users/interceptors/currentuserinterceptor.interceptor.ts:12",{"_index":229,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{}}}],["src/users/interceptors/currentuserinterceptor.interceptor.ts:6",{"_index":225,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{}}}],["src/users/middlewares/currentusermiddleware.middleware.ts",{"_index":236,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"coverage.html":{}}}],["src/users/middlewares/currentusermiddleware.middleware.ts:16",{"_index":238,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["src/users/middlewares/currentusermiddleware.middleware.ts:19",{"_index":244,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["src/users/user.entity",{"_index":29,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{}}}],["src/users/user.entity.ts",{"_index":350,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":367,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:17",{"_index":361,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":369,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":356,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:26",{"_index":358,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":355,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":365,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:37",{"_index":357,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:40",{"_index":353,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:43",{"_index":366,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:46",{"_index":354,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:23",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:38",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:52",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:72",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:78",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:84",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":476,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.module.ts:27",{"_index":477,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":249,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["src/users/users.service.ts",{"_index":489,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:10",{"_index":491,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:14",{"_index":492,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:35",{"_index":495,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":500,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:57",{"_index":496,"title":{},"body":{"injectables/UsersService.html":{}}}],["sslvalidatecertificate",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["start",{"_index":599,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":602,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":604,"title":{},"body":{"index.html":{}}}],["started",{"_index":579,"title":{"index.html":{}},"body":{}}],["starter",{"_index":592,"title":{},"body":{"index.html":{}}}],["statements",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":626,"title":{},"body":{"index.html":{}}}],["string",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["string,@session",{"_index":458,"title":{},"body":{"controllers/UsersController.html":{}}}],["support",{"_index":618,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":637,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":542,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":607,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":610,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":609,"title":{},"body":{"index.html":{}}}],["tests",{"_index":606,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":616,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":56,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(email,password",{"_index":459,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.configservice.get('cookiee",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["this.repository.create(createroledto",{"_index":330,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.repository.find",{"_index":513,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.findoneby",{"_index":516,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.findoneby({userid",{"_index":517,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.findoneby({username",{"_index":521,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.findoneby({usertype",{"_index":332,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.repository.remove(user",{"_index":522,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.repository.save(role",{"_index":331,"title":{},"body":{"injectables/RolesService.html":{}}}],["this.repository.save(user",{"_index":511,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.roleservice.createrole(createroledto",{"_index":308,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.roleservice.getrolebyname('admin",{"_index":510,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.roleservice.getrolebyname(roletype",{"_index":311,"title":{},"body":{"controllers/RolesController.html":{}}}],["this.userservice.getlistofusers",{"_index":464,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getuserbyemail(createuserdto.emailaddress",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.getuserbyemail(email",{"_index":467,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getuserbyemail(emailaddress",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["this.userservice.getuserbyemail(session.emailaddress",{"_index":448,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.removeuser(username",{"_index":472,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.updateuser(userid,{emailaddress",{"_index":470,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":627,"title":{},"body":{"index.html":{}}}],["transform",{"_index":390,"title":{},"body":{"classes/UserDTO.html":{}}}],["transform(({obj",{"_index":391,"title":{},"body":{"classes/UserDTO.html":{}}}],["transformer",{"_index":281,"title":{},"body":{"entities/Role.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"dependencies.html":{}}}],["true",{"_index":40,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":633,"title":{},"body":{"index.html":{}}}],["type",{"_index":18,"title":{},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"injectables/RolesService.html":{},"classes/SerializeInterceptor.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":284,"title":{},"body":{"entities/Role.html":{},"injectables/RolesService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeorm.config",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([role",{"_index":319,"title":{},"body":{"modules/RolesModule.html":{}}}],["typeormmodule.forfeature([user]),rolesmodule",{"_index":484,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forroot(datasourceoptions",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["types/cookie",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":591,"title":{},"body":{"index.html":{}}}],["unit",{"_index":605,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":647,"title":{},"body":{"properties.html":{}}}],["updatedatecolumn",{"_index":273,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["updatedon",{"_index":263,"title":{},"body":{"entities/Role.html":{},"entities/User.html":{}}}],["updateuser",{"_index":490,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(userid",{"_index":497,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserbyuserid",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserbyuserid(@query('userid",{"_index":468,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserbyuserid(userid",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["us10.hanacloud.ondemand.com",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["use",{"_index":237,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{}}}],["use(req",{"_index":239,"title":{},"body":{"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["useclass",{"_index":487,"title":{},"body":{"modules/UsersModule.html":{}}}],["useguards",{"_index":299,"title":{},"body":{"controllers/RolesController.html":{}}}],["useguards(adminguard",{"_index":463,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(authguard",{"_index":449,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(authguard)@get('/whoami",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(currentuserinterceptor",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(new",{"_index":344,"title":{},"body":{"classes/SerializeInterceptor.html":{}}}],["useinterceptors,nestinterceptor",{"_index":230,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{},"classes/SerializeInterceptor.html":{}}}],["user",{"_index":28,"title":{"entities/User.html":{}},"body":{"guards/AdminGuard.html":{},"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"entities/Role.html":{},"controllers/RolesController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user,role",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["user.emailaddress",{"_index":461,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.emailaddress=createuserdto.emailaddress",{"_index":505,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.entity",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.firstname=createuserdto.firstname",{"_index":506,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.isactiveuser",{"_index":504,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.lastname=createuserdto.lastname",{"_index":507,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.password.split",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password=createuserdto.password",{"_index":508,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.role",{"_index":276,"title":{},"body":{"entities/Role.html":{},"injectables/UsersService.html":{}}}],["user.userid",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.username=createuserdto.username",{"_index":509,"title":{},"body":{"injectables/UsersService.html":{}}}],["user:user",{"_index":35,"title":{},"body":{"guards/AdminGuard.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{}}}],["user=await",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{}}}],["userdto",{"_index":168,"title":{"classes/UserDTO.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["userid",{"_index":352,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDTO.html":{},"entities/User.html":{},"classes/UserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["username:'root",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["users",{"_index":264,"title":{},"body":{"entities/Role.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":478,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":393,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{}}}],["userservice:usersservice",{"_index":233,"title":{},"body":{"injectables/CurrentUserInterceptor.html":{}}}],["usersmodule",{"_index":65,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":151,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CurrentUserInterceptor.html":{},"injectables/CurrentUserMiddleware.html":{},"interfaces/Request.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice,authservice",{"_index":485,"title":{},"body":{"modules/UsersModule.html":{}}}],["usersservice,public",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["usertype",{"_index":208,"title":{},"body":{"classes/CreateRoleDTO.html":{},"entities/Role.html":{},"injectables/RolesService.html":{},"classes/UserDTO.html":{}}}],["util",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":212,"title":{},"body":{"classes/CreateRoleDTO.html":{},"classes/CreateUserDTO.html":{},"dependencies.html":{}}}],["value",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":529,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":648,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":645,"title":{},"body":{"properties.html":{}}}],["void",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["watch",{"_index":600,"title":{},"body":{"index.html":{}}}],["website",{"_index":631,"title":{},"body":{"index.html":{}}}],["whoami",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(@currentuser",{"_index":450,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(@session",{"_index":447,"title":{},"body":{"controllers/UsersController.html":{}}}],["whoami(user",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["woodduck",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["world",{"_index":139,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":621,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/RolesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"guards/AdminGuard.html":{"url":"guards/AdminGuard.html","title":"guard - AdminGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AdminGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/adminGuard.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/adminGuard.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate,ExecutionContext } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\nimport { User } from \"src/users/user.entity\";\n\nexport class AdminGuard implements CanActivate\n{\n  canActivate(context: ExecutionContext) {\n    const request = context.switchToHttp().getRequest();\n    const user:User =  request.currentUser;\n    if(user.role.userType === 'ADMIN')\n    {\n        return true;\n    }else{\n      return false;\n    }\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { join } from 'path';\nimport {ConfigModule,ConfigService} from '@nestjs/config';\nimport { RolesModule } from './roles/roles.module';\nimport { Role } from './roles/role.entity';\nconst cookieSession = require('cookie-session');\n// import ormconfig = require('../ormconfig');\nimport {dataSourceOptions} from './typeorm.config';\n\n@Module({\n  imports: [ConfigModule.forRoot({\n    isGlobal: true,\n    envFilePath: './.env.development',\n  }),\n  //   TypeOrmModule.forRoot({\n  //   // name: \"dbadmin\",\n  //   // type: \"sap\",\n  //   // host: \"5d7f1a59-72cf-4a09-be2d-f6511f48638f.hana.trial-us10.hanacloud.ondemand.com\",\n  //   // port: 443,\n  //   // username: \"dbadmin\",\n  //   // password: \"Root12345*\",\n  //   \"logging\": true,\n  //   // \"schema\": \"DBADMIN\",\n  //   // \"encrypt\": true,\n  //   // \"extra\": {\n  //   //   \"sslValidateCertificate\": false\n  //   // },\n  //    type : 'sqlite',\n  //   // database: 'db.sqlite',\n  //   database: process.env.NAME,\n  //   entities: [User,Role],\n  //   // entities: ['./dist/users/*.entity.js'],\n  //   synchronize: true,\n  // }),\n\n  TypeOrmModule.forRoot(dataSourceOptions),\n  UsersModule,\n  RolesModule\n],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {\n  constructor(private configService: ConfigService){}\n\n  configure(consumer: MiddlewareConsumer)\n  {\n      consumer.apply(cookieSession({keys: [this.configService.get('COOKIEE-KEY')],}),).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guards/authGuard.guard.ts\n            \n\n\n\n\n                \n                Implements\n                \n                \n                                CanActivate\n                \n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/guards/authGuard.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate,ExecutionContext } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\n\nexport class AuthGuard implements CanActivate\n{\n  canActivate(context: ExecutionContext) {\n    const request = context.switchToHttp().getRequest();\n    return request.session.emailAddress;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signin\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(emailAddress: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailAddress\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from \"@nestjs/common\";\nimport { UsersService } from \"./users.service\";\nimport { randomBytes,scrypt as _scrypt } from \"crypto\";\nimport { promisify } from \"util\";\nimport { UserDTO } from \"./DTO/userDTO.dto\";\nimport { CreateUserDTO } from \"./DTO/createUserDTO.dto\";\nimport { User } from \"./user.entity\";\n\nconst scrypt= promisify(_scrypt);\n\n@Injectable()\nexport class AuthService{\n\n  constructor(private userService: UsersService){}\n\n  async signup(createUserDTO: CreateUserDTO)\n  {\n      const user= await this.userService.getUserByEmail(createUserDTO.emailAddress);\n      console.log(user);\n      if(user !== null)\n      {\n        throw new BadRequestException('Email already Exists');\n      }\n\n      const salt = randomBytes(8).toString('hex');\n      const hash = (await scrypt(createUserDTO.password,salt,32)) as Buffer;\n      const result = salt + '.' + hash.toString('hex');\n\n      createUserDTO.password = result;\n      const savedUser=this.userService.createUser(createUserDTO);\n      return savedUser;\n  }\n\n  async signin(emailAddress: string, password: string)\n  {\n    const user= await this.userService.getUserByEmail(emailAddress);\n\n      if(!user)\n      {\n        throw new BadRequestException('Invalid Email Address or Password');\n      }\n      const [salt,storedHash] = user.password.split('.');\n      const hash = (await scrypt(password,salt,32)) as Buffer;\n      // const result = salt + '.' + hash.toString('hex');\n      if(storedHash===hash.toString('hex'))\n      {\n          return user;\n      }else\n      {\n        throw new BadRequestException('Incorrect Password !!!');\n      }\n    \n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRoleDTO.html":{"url":"classes/CreateRoleDTO.html","title":"class - CreateRoleDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRoleDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/DTO/createRoleDTO.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                userType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        userType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/DTO/createRoleDTO.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString,IsNumber,Min,Max,IsLatitude,IsLongitude } from \"class-validator\";\nexport class CreateRoleDTO{\n\n  @IsString()\n  userType: string;\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTO/createUserDTO.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                emailAddress\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        emailAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/createUserDTO.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/createUserDTO.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/createUserDTO.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/createUserDTO.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/createUserDTO.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString } from \"class-validator\";\nexport class CreateUserDTO\n{\n    @IsString()\n    userName: string;\n\n    @IsString()\n    password: string;\n\n    @IsString()\n    firstName: string;\n\n    @IsString()\n    lastName: string;\n\n    @IsEmail()\n    emailAddress: string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrentUserInterceptor.html":{"url":"injectables/CurrentUserInterceptor.html","title":"injectable - CurrentUserInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CurrentUserInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interceptors/currentUserInterceptor.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/interceptors/currentUserInterceptor.interceptor.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        intercept\n                        \n                    \n                \n            \n            \n                \n                    \n                    intercept(context: ExecutionContext, handler: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/users/interceptors/currentUserInterceptor.interceptor.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    handler\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UseInterceptors,NestInterceptor, ExecutionContext,CallHandler } from \"@nestjs/common\";\nimport { Injectable } from \"@nestjs/common\";\nimport { UsersService } from \"../users.service\";\n\n@Injectable()\nexport class CurrentUserInterceptor implements NestInterceptor{\n\n  constructor(private userService:UsersService){}\n\n  \n\n  async intercept(context: ExecutionContext, handler: CallHandler)  {\n    \n    const request = await context.switchToHttp().getRequest();\n    const emailAddress = request.session.emailAddress;\n\n    const user = await  this.userService.getUserByEmail(emailAddress);\n    request.currentUser = user;\n\n    return handler.handle();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CurrentUserMiddleware.html":{"url":"injectables/CurrentUserMiddleware.html","title":"injectable - CurrentUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CurrentUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/middlewares/currentUserMiddleware.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/users/middlewares/currentUserMiddleware.middleware.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/users/middlewares/currentUserMiddleware.middleware.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { NestMiddleware } from \"@nestjs/common/interfaces/middleware\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { User } from \"src/users/user.entity\";\nimport { UsersService } from \"src/users/users.service\";\n\ndeclare global{\n  namespace Express{\n    interface Request{\n      currentUser?: User;\n    }\n  }\n}\n\n@Injectable()\nexport class CurrentUserMiddleware implements NestMiddleware{\n\n  constructor(private userService: UsersService){}\n  async use(req: Request, res: Response, next: NextFunction) {\n    const {emailAddress} = req.session || {};\n    const user:User = await this.userService.getUserByEmail(emailAddress);\n    req.currentUser = user;\n     next();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Request.html":{"url":"interfaces/Request.html","title":"interface - Request","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Request\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/middlewares/currentUserMiddleware.middleware.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            currentUser\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentUser:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { NestMiddleware } from \"@nestjs/common/interfaces/middleware\";\nimport { NextFunction, Request, Response } from \"express\";\nimport { User } from \"src/users/user.entity\";\nimport { UsersService } from \"src/users/users.service\";\n\ndeclare global{\n  namespace Express{\n    interface Request{\n      currentUser?: User;\n    }\n  }\n}\n\n@Injectable()\nexport class CurrentUserMiddleware implements NestMiddleware{\n\n  constructor(private userService: UsersService){}\n  async use(req: Request, res: Response, next: NextFunction) {\n    const {emailAddress} = req.session || {};\n    const user:User = await this.userService.getUserByEmail(emailAddress);\n    req.currentUser = user;\n     next();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Role.html":{"url":"entities/Role.html","title":"entity - Role","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Role\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/role.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdOn\n                            \n                            \n                                deletedOn\n                            \n                            \n                                roleId\n                            \n                            \n                                updatedOn\n                            \n                            \n                                users\n                            \n                            \n                                userType\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/role.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/role.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roleId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/role.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/role.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(type => User, user => user.role)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/role.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/roles/role.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from \"class-transformer\";\nimport { User } from \"src/users/user.entity\";\nimport { PrimaryGeneratedColumn,Column, Entity, OneToMany,CreateDateColumn,UpdateDateColumn,DeleteDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Role{\n\n  @PrimaryGeneratedColumn()\n  roleId: number\n\n  @Column()\n  userType: string;\n\n  @OneToMany(type => User, user => user.role)\n  users: User[];\n\n  @CreateDateColumn()\n  createdOn: Date;\n  \n  @UpdateDateColumn()\n  updatedOn: Date;\n\n  @DeleteDateColumn()\n  deletedOn: Date;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RolesController.html":{"url":"controllers/RolesController.html","title":"controller - RolesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RolesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                roles\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createRole\n                            \n                            \n                                getRoleByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createRole\n                        \n                    \n                \n            \n            \n                \ncreateRole(createRoleDTO: CreateRoleDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/createRole')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDTO\n                                    \n                                                CreateRoleDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoleByName\n                        \n                    \n                \n            \n            \n                \ngetRoleByName(roleType: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('getRoleByName')\n                \n            \n\n            \n                \n                    Defined in src/roles/roles.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roleType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller,Post,Get,Put,Query,Body, UseGuards } from '@nestjs/common';\nimport { CurrentUser } from 'src/decorators/currentUser.decorators';\nimport { AuthGuard } from 'src/guards/authGuard.guard';\nimport { User } from 'src/users/user.entity';\nimport { CreateRoleDTO } from './DTO/createRoleDTO.dto';\nimport { RolesService } from './roles.service';\n\n@Controller('roles')\nexport class RolesController {\n\n  constructor(private roleService: RolesService){}\n\n  @Post('/createRole')\n  createRole(@Body() createRoleDTO: CreateRoleDTO )\n  {\n     const role= this.roleService.createRole(createRoleDTO);\n     console.log(role);\n     return role;\n  }\n\n  @Get('getRoleByName')\n  getRoleByName(@Query('usertype') roleType: string)\n  {\n     return this.roleService.getRoleByName(roleType);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RolesModule.html":{"url":"modules/RolesModule.html","title":"module - RolesModule","body":"\n                   \n\n\n\n\n    Modules\n    RolesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\n\nRolesService \n\nRolesService \n\n\n\nRolesModule\n\nRolesModule\n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/roles/roles.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RolesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RolesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RolesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Role } from './role.entity';\nimport { RolesController } from './roles.controller';\nimport { RolesService } from './roles.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Role])],\n  controllers: [RolesController],\n  providers: [RolesService],\n  exports: [RolesService]\n})\nexport class RolesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RolesService.html":{"url":"injectables/RolesService.html","title":"injectable - RolesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RolesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/roles/roles.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createRole\n                            \n                            \n                                getRoleByName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/roles/roles.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createRole\n                        \n                    \n                \n            \n            \n                \ncreateRole(createRoleDTO: CreateRoleDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRoleDTO\n                                    \n                                                CreateRoleDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRoleByName\n                        \n                    \n                \n            \n            \n                \ngetRoleByName(userType: string)\n                \n            \n\n\n            \n                \n                    Defined in src/roles/roles.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userType\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateRoleDTO } from './DTO/createRoleDTO.dto';\nimport { Role } from './role.entity';\n\n\n@Injectable()\nexport class RolesService {\n  constructor(@InjectRepository(Role) private repository: Repository){}\n\n  createRole(createRoleDTO :CreateRoleDTO)\n  {\n    const role = this.repository.create(createRoleDTO);\n    return this.repository.save(role);\n  }\n\n\n  getRoleByName(userType: string)\n  {\n   return this.repository.findOneBy({userType})\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SerializeInterceptor.html":{"url":"classes/SerializeInterceptor.html","title":"class - SerializeInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SerializeInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/serialize.interceptor.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        NestInterceptor\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dto: any)\n                    \n                \n                        \n                            \n                                Defined in src/interceptors/serialize.interceptor.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dto\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/serialize.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseInterceptors,NestInterceptor, \nExecutionContext,CallHandler } from \"@nestjs/common\";\nimport {  Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { plainToClass } from \"class-transformer\";\n\nexport function serialize(dto:any)\n{\n  return UseInterceptors(new SerializeInterceptor(dto));\n}\nexport class SerializeInterceptor implements NestInterceptor{\n  constructor(private dto:any){  }\n  intercept(context: ExecutionContext, next: CallHandler): Observable  {\n    return next.handle().pipe(map((data:any)=>{\n      return plainToClass(this.dto,data,{\n        excludeExtraneousValues:true\n      });\n    }),\n    );\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdOn\n                            \n                            \n                                deletedOn\n                            \n                            \n                                emailAddress\n                            \n                            \n                                firstName\n                            \n                            \n                                isActiveUser\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                            \n                                updatedOn\n                            \n                            \n                                userId\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActiveUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 300})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(type => Role, role => role.users, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 225})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Role } from \"src/roles/role.entity\";\nimport { Entity,Column,PrimaryGeneratedColumn,\n   OneToMany, JoinColumn, OneToOne, ManyToOne,\n  CreateDateColumn, \n  UpdateDateColumn,\n  DeleteDateColumn} from \"typeorm\";\n// import { Exclude } from \"class-transformer\";\n\n@Entity()\nexport class User{\n\n  @PrimaryGeneratedColumn()\n  userId : number;\n\n  @Column({length: 300})\n  // @Exclude()\n  password: string;\n  \n  @Column({length: 225})\n  userName: string;\n\n  @Column()\n  firstName: string;\n\n  @Column()\n  lastName: string;\n\n  @Column()\n  emailAddress: string;\n\n  @ManyToOne(type => Role, role => role.users,{\n    eager:true\n  })\n  role: Role;\n\n  @Column()\n  isActiveUser: boolean;\n\n  @CreateDateColumn()\n  createdOn: Date;\n  \n  @UpdateDateColumn()\n  updatedOn: Date;\n\n  @DeleteDateColumn()\n  deletedOn: Date;\n\n  \n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDTO.html":{"url":"classes/UserDTO.html","title":"class - UserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTO/userDTO.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                activeUser\n                            \n                            \n                                emailAddress\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                permissionSet\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        activeUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/userDTO.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        emailAddress\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/userDTO.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/userDTO.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/userDTO.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/userDTO.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        permissionSet\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()@Transform( => )\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/userDTO.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Expose()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTO/userDTO.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Expose,Exclude, Transform} from  'class-transformer';\nexport class UserDTO\n{\n  @Expose()\n  userName: string;\n\n  @Exclude()\n  password: string;\n\n  @Expose()\n  firstName: string;\n\n  @Expose()\n  lastName: string;\n\n  @Expose()\n  emailAddress: string;\n\n  @Expose()\n  activeUser: boolean;\n\n  @Expose()\n  @Transform(({obj})=> \n   {\n    return {userType :  obj.role.userType };\n  }\n  )\n  permissionSet: any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                getListOfUsers\n                            \n                            \n                                getUserByEmail\n                            \n                            \n                                removeUser\n                            \n                            \n                                    Async\n                                signin\n                            \n                            \n                                signout\n                            \n                            \n                                updateUserByUserId\n                            \n                            \n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDTO: CreateUserDTO, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getListOfUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getListOfUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @serialize(UserDTO)@Get('/listOfUsers')@UseGuards(AdminGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \ngetUserByEmail(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @serialize(UserDTO)@Get('/getUserByEmail')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeUser\n                        \n                    \n                \n            \n            \n                \nremoveUser(userName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                    \n                    signin(email: string, password: string, session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @serialize(UserDTO)@Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        signout\n                        \n                    \n                \n            \n            \n                \nsignout(session: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('signout')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    session\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserByUserId\n                        \n                    \n                \n            \n            \n                \nupdateUserByUserId(userId: number, emailAddress: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/updateUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    emailAddress\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        whoAmI\n                        \n                    \n                \n            \n            \n                \nwhoAmI(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('/whoAmI')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller,Post,Get,Put,Body,\n  Query,Delete,UseInterceptors,ClassSerializerInterceptor,Session, HttpStatus,UseGuards } from '@nestjs/common';\nimport { CreateUserDTO } from './DTO/createUserDTO.dto';\nimport { UsersService } from './users.service';\nimport {serialize} from '../interceptors/serialize.interceptor'\nimport { UserDTO } from './DTO/userDTO.dto';\nimport { AuthService } from './auth.service';\nimport { CurrentUser } from 'src/decorators/currentUser.decorators';\nimport { CurrentUserInterceptor } from './interceptors/currentUserInterceptor.interceptor';\nimport { User } from './user.entity';\nimport {AuthGuard} from '../guards/authGuard.guard';\nimport { AdminGuard } from 'src/guards/AdminGuard.guard';\nimport { Console } from 'console';\n\n\n@Controller('users')\n// @UseInterceptors(CurrentUserInterceptor)\nexport class UsersController {\n\n  constructor(public userService: UsersService,public authService: AuthService){}\n\n  @Post('/signup')\n  async createUser(@Body() createUserDTO: CreateUserDTO,@Session() session:any)\n  {\n      const user=await this.authService.signup(createUserDTO);\n      session.userId = user.userId;\n      return user;\n  }\n\n  // @Get('/whoAmI')\n  // whoAmI(@Session() session:any)\n  // {\n  //   return this.userService.getUserByEmail(session.emailAddress);\n  // }\n\n  @UseGuards(AuthGuard)\n  @Get('/whoAmI')\n  whoAmI(@CurrentUser() user : User)\n  {\n    return user;\n  }\n\n  @Post('signout')\n  signout(@Session() session: any)\n  {\n    session.emailAddress=null;\n    return HttpStatus.OK;\n  }\n\n  @serialize(UserDTO)\n  @Post('/signin')\n  async signin(@Query('email') email : string, @Query('password') password: string,@Session() session:any)\n  {\n      const user = await this.authService.signin(email,password);\n      session.emailAddress = user.emailAddress;\n      return user;\n  }\n\n  @serialize(UserDTO)\n  @Get('/listOfUsers')\n  @UseGuards(AdminGuard)\n  async getListOfUsers()\n  {\n    const user= await this.userService.getListofUsers();\n    console.log(user);\n    return user;\n\n  }\n\n  @serialize(UserDTO)\n  @Get('/getUserByEmail')\n  getUserByEmail(@Query('email') email: string )\n  {\n      return this.userService.getUserByEmail(email);\n  }\n\n  @Put('/updateUser')\n  updateUserByUserId(@Query('userId') userId: number,@Query('emailAddress') emailAddress: string)\n  {\n    return this.userService.updateUser(userId,{emailAddress: emailAddress});\n  }\n\n  @Delete()\n  removeUser(@Query('userName') userName: string)\n  {\n      return this.userService.removeUser(userName);\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RolesModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.module.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { AuthService } from './auth.service';\nimport { CurrentUserInterceptor } from './interceptors/currentUserInterceptor.interceptor';\nimport { APP_INTERCEPTOR } from '@nestjs/core';\nimport { RolesService } from 'src/roles/roles.service';\nimport { RolesModule } from 'src/roles/roles.module';\nimport { CurrentUserMiddleware } from './middlewares/currentUserMiddleware.middleware';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User]),RolesModule],\n  exports: [TypeOrmModule],\n  controllers: [UsersController],\n  providers: [UsersService,AuthService,\n    {\n    provide:  APP_INTERCEPTOR,\n    useClass: CurrentUserInterceptor\n  }\n  ],\n  \n})\nexport class UsersModule {\n\n  configure(consumer: MiddlewareConsumer)\n  {\n      consumer.apply(CurrentUserMiddleware).forRoutes('*');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                getListofUsers\n                            \n                            \n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Async\n                                removeUser\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository, roleService: RolesService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        roleService\n                                                  \n                                                        \n                                                                        RolesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getListofUsers\n                        \n                    \n                \n            \n            \n                \ngetListofUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(emailAddress: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailAddress\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUser(userName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(userId: number, attrs: Partial)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    attrs\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable,NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm'; \nimport { Repository } from 'typeorm';\nimport { User } from './user.entity';\nimport { CreateUserDTO } from './DTO/createUserDTO.dto';\nimport { RolesService } from 'src/roles/roles.service';\nimport { Role } from 'src/roles/role.entity';\n\n@Injectable()\nexport class UsersService {\n\n  constructor(@InjectRepository(User) private repository : Repository,private roleService: RolesService){}\n\n  async createUser(createUserDTO: CreateUserDTO)\n  {\n    const user= new User();\n    user.isActiveUser = true;\n    user.emailAddress=createUserDTO.emailAddress;\n    user.firstName=createUserDTO.firstName;\n    user.lastName=createUserDTO.lastName;\n    user.password=createUserDTO.password;\n    user.userName=createUserDTO.userName;\n    const role = await this.roleService.getRoleByName('ADMIN');\n    user.role = role;\n    return await this.repository.save(user);\n  }\n\n  getListofUsers()\n  {\n    const list= this.repository.find();\n    console.log(list);\n    return list;\n  }\n\n  async getUserByEmail(emailAddress : string)\n  {\n    if(!emailAddress)\n    {\n      return null;\n    }\n    // return this.repository.find({ where: { emailAddress } });\n    return await this.repository.findOneBy( { emailAddress } );\n  }\n\n  async updateUser(userId : number, attrs: Partial)\n  {\n    const user = await this.repository.findOneBy({userId});\n    if(!user)\n    {\n      throw new NotFoundException(\"User not Found\");\n    }\n    Object.assign(user,attrs);\n    return this.repository.save(user);\n  }\n\n\n  async removeUser(userName: string)\n  {\n    const user = await this.repository.findOneBy({userName});\n    if(!user)\n    {\n      throw new NotFoundException(\"User not Found\");\n    }\n    return this.repository.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            cookieSession\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/decorators/currentUser.decorators.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/guards/adminGuard.guard.ts\n            \n            guard\n            AdminGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guards/authGuard.guard.ts\n            \n            guard\n            AuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            class\n            SerializeInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/interceptors/serialize.interceptor.ts\n            \n            function\n            serialize\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            cookieSession\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/DTO/createRoleDTO.dto.ts\n            \n            class\n            CreateRoleDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/roles/role.entity.ts\n            \n            entity\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/roles/roles.controller.ts\n            \n            controller\n            RolesController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/roles/roles.service.ts\n            \n            injectable\n            RolesService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/typeorm.config.ts\n            \n            variable\n            dataSource\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/typeorm.config.ts\n            \n            variable\n            dataSourceOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/DTO/createUserDTO.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/DTO/userDTO.dto.ts\n            \n            class\n            UserDTO\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/auth.service.ts\n            \n            variable\n            scrypt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/interceptors/currentUserInterceptor.interceptor.ts\n            \n            injectable\n            CurrentUserInterceptor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/middlewares/currentUserMiddleware.middleware.ts\n            \n            injectable\n            CurrentUserMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/middlewares/currentUserMiddleware.middleware.ts\n            \n            interface\n            Request\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @sap/hana-client : ^2.16.21\n        \n            @types/cookie-session : ^2.0.44\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            cookie-session : ^2.0.0\n        \n            cross-env : ^7.0.3\n        \n            hdb-pool : ^0.1.6\n        \n            mysql2 : ^2.3.3\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            sqlite3 : ^5.1.6\n        \n            typeorm : ^0.3.11\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            serialize   (src/.../serialize.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/interceptors/serialize.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize(dto: any)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dto\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RolesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_RolesModule\n\n\n\ncluster_RolesModule_exports\n\n\n\ncluster_RolesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nRolesModule\n\nRolesModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nRolesModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nRolesModule->AppModule\n\n\n\n\n\nRolesService \n\nRolesService \n\nRolesService  -->\n\nRolesModule->RolesService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nRolesService\n\nRolesService\n\nRolesModule -->\n\nRolesService->RolesModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nUsersModule -->\n\nAuthService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            cookieSession   (src/.../app.module.ts)\n                        \n                        \n                            cookieSession   (src/.../main.ts)\n                        \n                        \n                            CurrentUser   (src/.../currentUser.decorators.ts)\n                        \n                        \n                            dataSource   (src/.../typeorm.config.ts)\n                        \n                        \n                            dataSourceOptions   (src/.../typeorm.config.ts)\n                        \n                        \n                            scrypt   (src/.../auth.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieSession\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('cookie-session')\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        cookieSession\n                        \n                    \n                \n            \n                \n                    \n                        Default value : require('cookie-session')\n                    \n                \n\n\n        \n    \n\n    src/decorators/currentUser.decorators.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator((data: never, context : ExecutionContext) => {\n    const request = context.switchToHttp().getRequest();\n    return request.currentUser;\n}\n)\n                    \n                \n\n\n        \n    \n\n    src/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dataSource\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new DataSource(dataSourceOptions)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dataSourceOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DataSourceOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'mysql',\n  database: 'woodduck',\n  username:'root',\n  password:'root',\n  entities: ['dist/**/*.entity.{js,ts}'],\n  migrations: ['migrations/*.js'],\n  migrationsTableName: 'migrations',\n  synchronize: true,\n  logging: true,\n  // migrationsRun:true,\n  }\n                    \n                \n\n\n        \n    \n\n    src/users/auth.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        scrypt\n                        \n                    \n                \n            \n                \n                    \n                        Default value : promisify(_scrypt)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
